(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{621:function(t,e,a){"use strict";a.r(e);var s={data:function(){return{testPhone:null,testToken:null,testMasks:null,selectedMask:null,masks:[{id:1,mask:"###-##-####",name:"Social Security Number",placeholder:"XXX-XX-XXXX",val:null},{id:2,mask:"#####",name:"Zip (US)",placeholder:"",val:null},{id:3,mask:"#####-####",name:"Zip +4 (US)",placeholder:"",val:null},{id:4,mask:"##/##/#### ##:##:##",name:"Date and time",placeholder:"dd/mm/yyyy hh:mm:ss",val:null},{id:5,mask:'S#S #S#"',name:"Canada Zip",placeholder:"",val:null},{id:6,mask:"XX.XX.XXXXX.X.X.XXXXXX",name:"Vehicle Identification",placeholder:"Enter VIN",val:null}],hexTokens:{F:{pattern:/[0-9a-fA-F]/,transform:function(t){return t.toLocaleUpperCase()}}}}}},n=a(1),r=Object(n.a)(s,(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"masked-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#masked-input"}},[t._v("#")]),t._v(" Masked Input")]),t._v(" "),a("p",[t._v("A version of the "),a("code",[t._v("<us-form-input>")]),t._v(" exists with masking, this allows for guided user input for things that require specific struct. For example; phone numbers, zip codes, social security numbers, etc.")]),t._v(" "),a("p",[t._v("This component uses the 3rd party library "),a("a",{attrs:{href:"https://vuejs-tips.github.io/vue-the-mask/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-the-mask"),a("OutboundLink")],1),t._v(", and supports any of the masks shown "),a("a",{attrs:{href:"https://vuejs-tips.github.io/vue-the-mask/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"mb-3 mt-3"},[a("us-form",{attrs:{validate:!0},scopedSlots:t._u([{key:"default",fn:function(e){var s=e.isValid,n=e.isDirty;return[a("us-form-group",{attrs:{label:"A basic text field"}},[a("us-form-input-masked",{attrs:{mask:"(###)-###-####",placeholder:"Enter phone number",rules:{required:!0}},model:{value:t.testPhone,callback:function(e){t.testPhone=e},expression:"testPhone"}})],1),t._v(" "),a("us-button",{attrs:{type:"submit",variant:"primary"}},[t._v("Submit")]),t._v(" "),!1===s?a("us-tag",{attrs:{variant:"danger"}},[t._v("Invalid")]):!0===s?a("us-tag",{attrs:{variant:"success"}},[t._v("Valid")]):t._e(),t._v(" "),!0===n?a("us-tag",{attrs:{variant:"dark"}},[t._v("Dirty")]):!1===n?a("us-tag",{attrs:{variant:"light"}},[t._v("Prestine")]):t._e()]}}])}),t._v(" "),a("div",{staticClass:"mt-2"},[t._v("You entered: "+t._s(t.testPhone))])],1),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("div",{staticClass:"mb-3 mt-3"},t._l(t.masks,(function(e){return a("div",{key:e.id},[a("us-form-group",{attrs:{label:e.name,"help-text":"Using the mask "+e.mask}},[a("us-form-input-masked",{attrs:{mask:e.mask,placeholder:e.placeholder},model:{value:e.val,callback:function(a){t.$set(e,"val",a)},expression:"mask.val"}})],1)],1)})),0),t._v(" "),a("h2",{attrs:{id:"tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tokens"}},[t._v("#")]),t._v(" Tokens")]),t._v(" "),a("p",[t._v("The follow tokens are allowed by default, though you can fully customize (see below). You can mix and match these to create more complex\nmasks.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Character")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Pattern")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("#")]),t._v(" "),a("td",[t._v("Only numbers")]),t._v(" "),a("td",[t._v("{pattern: /\\d/}")])]),t._v(" "),a("tr",[a("td",[t._v("X")]),t._v(" "),a("td",[t._v("Only letters or numbers")]),t._v(" "),a("td",[t._v("{ pattern: /[0-9a-zA-Z]/ }")])]),t._v(" "),a("tr",[a("td",[t._v("S")]),t._v(" "),a("td",[t._v("Only letters")]),t._v(" "),a("td",[t._v("{pattern: /[a-zA-Z]/}")])]),t._v(" "),a("tr",[a("td",[t._v("A")]),t._v(" "),a("td",[t._v("Only letters, and convert to uppercase")]),t._v(" "),a("td",[t._v("{pattern: /[a-zA-Z]/, transform: v => v.toLocaleUppperCase()}")])]),t._v(" "),a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("Only letters, and convert to lowercase")]),t._v(" "),a("td",[t._v("{pattern: /[a-zA-Z]/, transform: v => v.toLocaleLowerCase()}")])]),t._v(" "),a("tr",[a("td",[t._v("!")]),t._v(" "),a("td",[t._v("Escape, allows you to escape the following masked character")]),t._v(" "),a("td",[t._v("{ escape: true }")])])])]),t._v(" "),a("h2",{attrs:{id:"custom-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-tokens"}},[t._v("#")]),t._v(" Custom tokens")]),t._v(" "),a("p",[t._v("You can also pass in other tokens, and even pass a custom transformer to customize how the the user input is converted. For example;")]),t._v(" "),a("div",{staticClass:"mb-3 mt-3"},[a("us-form",[a("us-form-group",{attrs:{label:"You can only enter hex!"}},[a("us-form-input-masked",{attrs:{mask:"FFFFF",placeholder:"Enter a hex value",tokens:t.hexTokens},model:{value:t.testToken,callback:function(e){t.testToken=e},expression:"testToken"}})],1)],1),t._v(" "),a("div",{staticClass:"mt-2"},[t._v("You entered: "+t._s(t.testPhone))])],1),t._v(" "),a("div",{staticClass:"language-vue line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("us-form-input-masked")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("mask")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("FFFFF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("placeholder")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Enter a hex value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":tokens")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{\n        F: {\n            pattern: /[0-9a-fA-F]/,\n            transform: v => v.toLocaleUpperCase()\n        }\n    }"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-model")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("testToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("p",[t._v("Inherited for all form inputs;")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Default")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("v-model")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("The v-model prop")])]),t._v(" "),a("tr",[a("td",[t._v("disabled")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("Disable the control")])]),t._v(" "),a("tr",[a("td",[t._v("name")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("The input name")])]),t._v(" "),a("tr",[a("td",[t._v("placeholder")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("The input name")])]),t._v(" "),a("tr",[a("td",[t._v("debounce")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("Set to true to debounce input (to wait for a user to stop typing)")])]),t._v(" "),a("tr",[a("td",[t._v("description")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("The input description")])]),t._v(" "),a("tr",[a("td",[t._v("rules")]),t._v(" "),a("td",[t._v("object")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("Validation rules (see form validation docs)")])]),t._v(" "),a("tr",[a("td",[t._v("valid")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("Allows you to manually control validation state")])]),t._v(" "),a("tr",[a("td",[t._v("validation-mode")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("'aggressive'")]),t._v(" "),a("td",[t._v("Validation mode, see validation docs for details.")])]),t._v(" "),a("tr",[a("td",[t._v("supress-error")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("Allow you to turn of the error string being displayed by validation")])])])]),t._v(" "),a("p",[t._v("Additonal properties specific to this component;")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Default")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("type")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("'text''")]),t._v(" "),a("td",[t._v("The input type")])]),t._v(" "),a("tr",[a("td",[t._v("mask")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("The mask to apply")])]),t._v(" "),a("tr",[a("td",[t._v("tokens")]),t._v(" "),a("td",[t._v("object")]),t._v(" "),a("td",[t._v("see tokens section")]),t._v(" "),a("td",[t._v("Allows you to use a custom token and transformer")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);